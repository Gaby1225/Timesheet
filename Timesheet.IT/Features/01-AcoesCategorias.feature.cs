// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Timesheet.IT.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class Feature : object, Xunit.IClassFixture<Feature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "01-AcoesCategorias.feature"
#line hidden
        
        public Feature(Feature.FixtureData fixtureData, Timesheet_IT_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("pt-br"), "Features", "", "Como administrador do sistema de timesheet da empresa XPTO\r\nEu quero cadastrar, e" +
                    "ditar, excluir e consultar categorias de atividades\r\nPara que os colaboradores d" +
                    "a empresa possam associá-los ao registro de timesheet", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="0100 - Cadastrar categorias")]
        [Xunit.TraitAttribute("FeatureTitle", "")]
        [Xunit.TraitAttribute("Description", "0100 - Cadastrar categorias")]
        public virtual void _0100_CadastrarCategorias()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("0100 - Cadastrar categorias", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 8
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Titulo"});
                table1.AddRow(new string[] {
                            "1",
                            "teste01"});
                table1.AddRow(new string[] {
                            "2",
                            "teste02"});
                table1.AddRow(new string[] {
                            "3",
                            "teste03"});
                table1.AddRow(new string[] {
                            "4",
                            ""});
#line 9
 testRunner.Given("as seguintes informações para cadastro de categoria:", ((string)(null)), table1, "Dados ");
#line hidden
#line 15
 testRunner.When("cadastrar a categoria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Titulo"});
                table2.AddRow(new string[] {
                            "1",
                            "teste01"});
                table2.AddRow(new string[] {
                            "2",
                            "teste02"});
                table2.AddRow(new string[] {
                            "3",
                            "teste03"});
#line 16
 testRunner.Then("devem existir as categorias cadastradas", ((string)(null)), table2, "Entao ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="0101 - Editar categorias")]
        [Xunit.TraitAttribute("FeatureTitle", "")]
        [Xunit.TraitAttribute("Description", "0101 - Editar categorias")]
        public virtual void _0101_EditarCategorias()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("0101 - Editar categorias", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 22
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Titulo"});
                table3.AddRow(new string[] {
                            "teste01"});
                table3.AddRow(new string[] {
                            "teste02"});
                table3.AddRow(new string[] {
                            "teste03"});
#line 23
 testRunner.Given("as seguintes informações:", ((string)(null)), table3, "Dados ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Titulo"});
                table4.AddRow(new string[] {
                            "teste001"});
#line 28
 testRunner.When("editar a categoria", ((string)(null)), table4, "Quando ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Titulo"});
                table5.AddRow(new string[] {
                            "teste001"});
                table5.AddRow(new string[] {
                            "teste02"});
                table5.AddRow(new string[] {
                            "teste03"});
#line 31
 testRunner.Then("devem existir", ((string)(null)), table5, "Entao ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="0102 - Excluir categorias")]
        [Xunit.TraitAttribute("FeatureTitle", "")]
        [Xunit.TraitAttribute("Description", "0102 - Excluir categorias")]
        public virtual void _0102_ExcluirCategorias()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("0102 - Excluir categorias", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 37
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "ID",
                            "Titulo"});
                table6.AddRow(new string[] {
                            "01",
                            "teste001"});
                table6.AddRow(new string[] {
                            "02",
                            "teste002"});
                table6.AddRow(new string[] {
                            "03",
                            "teste003"});
#line 38
 testRunner.Given("as seguintes informações:", ((string)(null)), table6, "Dados ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "ID",
                            "Titulo"});
                table7.AddRow(new string[] {
                            "02",
                            "teste002"});
#line 43
 testRunner.When("excluir a categoria por id", ((string)(null)), table7, "Quando ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "ID",
                            "Titulo"});
                table8.AddRow(new string[] {
                            "01",
                            "teste001"});
                table8.AddRow(new string[] {
                            "03",
                            "teste003"});
#line 46
 testRunner.Then("devem existir apenas os seguintes retornos", ((string)(null)), table8, "Entao ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="0103 - Consultar todas as categorias")]
        [Xunit.TraitAttribute("FeatureTitle", "")]
        [Xunit.TraitAttribute("Description", "0103 - Consultar todas as categorias")]
        public virtual void _0103_ConsultarTodasAsCategorias()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("0103 - Consultar todas as categorias", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 51
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Titulo"});
                table9.AddRow(new string[] {
                            "1",
                            "teste001"});
                table9.AddRow(new string[] {
                            "2",
                            "teste002"});
                table9.AddRow(new string[] {
                            "3",
                            "teste003"});
#line 52
 testRunner.Given("as seguintes informações para a consulta de todas as categorias:", ((string)(null)), table9, "Dados ");
#line hidden
#line 57
 testRunner.When("consultar todas as categorias cadastradas", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Titulo"});
                table10.AddRow(new string[] {
                            "1",
                            "teste001"});
                table10.AddRow(new string[] {
                            "2",
                            "teste002"});
                table10.AddRow(new string[] {
                            "3",
                            "teste003"});
#line 58
 testRunner.Then("devem existir as categorias consultadas", ((string)(null)), table10, "Entao ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="0104 - Consultar categoria por id")]
        [Xunit.TraitAttribute("FeatureTitle", "")]
        [Xunit.TraitAttribute("Description", "0104 - Consultar categoria por id")]
        public virtual void _0104_ConsultarCategoriaPorId()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("0104 - Consultar categoria por id", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 64
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Titulo"});
                table11.AddRow(new string[] {
                            "1",
                            "teste001"});
                table11.AddRow(new string[] {
                            "2",
                            "teste002"});
                table11.AddRow(new string[] {
                            "3",
                            "teste003"});
#line 65
 testRunner.Given("as seguintes informações para a consulta de categoria por id:", ((string)(null)), table11, "Dados ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Titulo"});
                table12.AddRow(new string[] {
                            "3",
                            "teste003"});
#line 70
 testRunner.When("consultar categoria cadastrada por id", ((string)(null)), table12, "Quando ");
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Titulo"});
                table13.AddRow(new string[] {
                            "3",
                            "teste003"});
#line 73
 testRunner.Then("deve existir a categoria consultada por id", ((string)(null)), table13, "Entao ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                Feature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                Feature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
